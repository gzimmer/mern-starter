{"version":3,"sources":["post.spec.js"],"names":["posts","name","title","slug","cuid","content","beforeEach","t","create","err","fail","afterEach","always","serial","plan","get","set","res","is","status","deepEqual","length","body","post","save","send","findOne","exec","savedPost","delete","queriedPost"],"mappings":"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","file":"post.spec.js","sourcesContent":["import test from 'ava';\nimport request from 'supertest';\nimport app from '../../server';\nimport Post from '../post';\nimport { connectDB, dropDB } from '../../util/test-helpers';\n\n// Initial posts added into test db\nconst posts = [\n  new Post({ name: 'Prashant', title: 'Hello Mern', slug: 'hello-mern', cuid: 'f34gb2bh24b24b2', content: \"All cats meow 'mern!'\" }),\n  new Post({ name: 'Mayank', title: 'Hi Mern', slug: 'hi-mern', cuid: 'f34gb2bh24b24b3', content: \"All dogs bark 'mern!'\" }),\n];\n\ntest.beforeEach('connect and add two post entries', t => {\n  connectDB(t, () => {\n    Post.create(posts, err => {\n      if (err) t.fail('Unable to create posts');\n    });\n  });\n});\n\ntest.afterEach.always(t => {\n  dropDB(t);\n});\n\ntest.serial('Should correctly give number of Posts', async t => {\n  t.plan(2);\n\n  const res = await request(app)\n    .get('/api/posts')\n    .set('Accept', 'application/json');\n\n  t.is(res.status, 200);\n  t.deepEqual(posts.length, res.body.posts.length);\n});\n\ntest.serial('Should send correct data when queried against a cuid', async t => {\n  t.plan(2);\n\n  const post = new Post({ name: 'Foo', title: 'bar', slug: 'bar', cuid: 'f34gb2bh24b24b2', content: 'Hello Mern says Foo' });\n  post.save();\n\n  const res = await request(app)\n    .get('/api/posts/f34gb2bh24b24b2')\n    .set('Accept', 'application/json');\n\n  t.is(res.status, 200);\n  t.is(res.body.post.name, post.name);\n});\n\ntest.serial('Should correctly add a post', async t => {\n  t.plan(2);\n\n  const res = await request(app)\n    .post('/api/posts')\n    .send({ post: { name: 'Foo', title: 'bar', content: 'Hello Mern says Foo' } })\n    .set('Accept', 'application/json');\n\n  t.is(res.status, 200);\n\n  const savedPost = await Post.findOne({ title: 'bar' }).exec();\n  t.is(savedPost.name, 'Foo');\n});\n\ntest.serial('Should correctly delete a post', async t => {\n  t.plan(2);\n\n  const post = new Post({ name: 'Foo', title: 'bar', slug: 'bar', cuid: 'f34gb2bh24b24b2', content: 'Hello Mern says Foo' });\n  post.save();\n\n  const res = await request(app)\n    .delete(`/api/posts/${post.cuid}`)\n    .set('Accept', 'application/json');\n\n  t.is(res.status, 200);\n\n  const queriedPost = await Post.findOne({ cuid: post.cuid }).exec();\n  t.is(queriedPost, null);\n});\n\n"]}